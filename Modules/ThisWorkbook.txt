VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ThisWorkbook"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
'*************************************************************************************************
'
'   ThisWorkbook
'       1. RibbonCommands calls the public subs
'                populateJobHeaders() and populateReport()
'       2. From there this call the private subs
'               populateHeaderFeatureInfo(), populateFeatureMeasuredValues(), populateTraceabilityInfo()
'*************************************************************************************************

Sub populateJobHeaders(jobNum As String, routine As Variant, customer As String, machine As String, partNum As String, rev As String, partDesc As String)
    On Error GoTo PopHeadersErr:
    Call Cleanup
    
    'If somebody entered nonsense into the Routine ComboBox, then we clear our variables and call this sub
    'That way the cleanup subroutine happens but then we skip setting empty values
    If IsEmpty(routine) Then Exit Sub
        
        
    With Worksheets("PAGE 1")
        .Unprotect Password:="3063bqa"
        
        .Range("C1").Value = jobNum
        .Range("C2").Value = routine
        .Range("C3").Value = customer
        .Range("C4").Value = machine
        .Range("G3").Value = partNum
        .Range("I3").Value = rev
        .Range("G4").Value = partDesc
        
        
        .protect Password:="3063bqa", AllowFormattingCells:=True
    End With
    Exit Sub

PopHeadersErr:
    Err.Raise Number:=Err.Number, description:="sub: populateJobHeaders" & vbCrLf & Err.description

End Sub

Public Sub populateReport(featureInfo() As Variant, featureMeasurements() As Variant, featureTraceability() As Variant)
    On Error GoTo PopulateReportErr

    'If user entered nonsense into the Routine ComboBox, we end up calling this sub but skip setting anything
    If (Not featureInfo) = -1 Or (Not featureMeasurements) = -1 Then Exit Sub
    
    Application.ScreenUpdating = False
    
    Dim applicablePages As Integer
    applicablePages = Application.WorksheetFunction.Floor(UBound(featureInfo, 2) / 8, 1) + 1
    
    For i = 1 To applicablePages
        ThisWorkbook.Worksheets("PAGE " & i).Unprotect Password:="3063bqa"
        ThisWorkbook.Worksheets("PAGE " & i).Visible = True
    Next i
    
    Call populateHeaderFeatureInfo(featureInfo:=featureInfo)
    Call populateFeatureMeasuredValues(featureMeasurements:=featureMeasurements)
    Call populateTraceabilityInfo(featureTraceabilityInfo:=featureTraceability, pages:=applicablePages)
    
    For i = 1 To applicablePages
        ThisWorkbook.Worksheets("PAGE " & i).protect Password:="3063bqa"
    Next i

    Application.ScreenUpdating = True
    Exit Sub
    
PopulateReportErr:
    Err.Raise Number:=Err.Number, description:=Err.description
End Sub

Private Sub populateHeaderFeatureInfo(featureInfo() As Variant)

    'featureInfo(0,i) -> Balloon Number
    'featureInfo(1,i) -> Feature Description
    'featureInfo(2,i) -> Lower Tolerance
    'featureInfo(3,i) -> Target
    'featureInfo(4,i) -> Upper Tolerance
    'featureInfo(5,i) -> Gauge ID
    'featureInfo(6,i) -> Variable / Attribute
    
    On Error GoTo FeatureHeadersErr
    
    For i = 0 To UBound(featureInfo, 2)
            Dim activePageNum As Integer
            activePageNum = Application.WorksheetFunction.Floor(i / 8, 1) + 1
            
            With ThisWorkbook.Worksheets("PAGE " & activePageNum)
                Dim colLetter As String
                colLetter = ExcelHelpers.GetAddress((i Mod 8) + 5)
                
                'TODO: This should be formatted
                .Range(colLetter & "9").Value = featureInfo(0, i) 'Balloon
                .Range(colLetter & "10").Value = featureInfo(1, i) 'Description
                
                If featureInfo(6, i) = "Variable" Then
                    .Range(colLetter & "16").Value = featureInfo(2, i) 'LTol
                    .Range(colLetter & "17").Value = featureInfo(3, i) 'Target
                    .Range(colLetter & "18").Value = featureInfo(4, i) 'UTol
                Else
                    .Range(colLetter & "16").Value = "N/A" 'LTol
                    .Range(colLetter & "17").Value = "N/A" 'Target
                    .Range(colLetter & "18").Value = "N/A" 'UTol
                
                End If
                
                .Range(colLetter & "19").Value = featureInfo(5, i) 'Gauge
                .Range(colLetter & "8").Value = featureInfo(6, i) 'Variable / Attribute  (hidden cell for later reference)
            End With
    Next i
    
    Exit Sub
    
FeatureHeadersErr:
    Err.Raise Number:=Err.Number, description:="sub: populateHeaderFeatureInfo" & vbCrLf & Err.description
End Sub

Private Sub populateFeatureMeasuredValues(featureMeasurements() As Variant)
    'featureMeasurements has n x m dimensions where
        'n is the number of features
        'm is the number of observations
    
    'featureMeasurements(n,m) -> [Value]
    On Error GoTo FeatureValuesErr

    For i = 0 To UBound(featureMeasurements, 1)
            If i = 0 Then GoTo NextFeature
            Dim activePageNum As Integer
            activePageNum = Application.WorksheetFunction.Floor((i - 1) / 8, 1) + 1

            With ThisWorkbook.Worksheets("PAGE " & activePageNum)
                Dim colLetter As String
                colLetter = ExcelHelpers.GetAddress(((i - 1) Mod 8) + 5)
                
                For j = 0 To UBound(featureMeasurements, 2)

                    'if the operator forgot to take a measurement, then it comes up as a NULL value
                    If VarType(featureMeasurements(i, j)) = vbNull Then
                        .Range(colLetter & (j + 22)).Value = "N/A"
                        GoTo NextMeasurement
                    End If
                    'We store a hidden value for Attribute/Variable in the 8th row
                    'If the returned value on an attribute dimension is 1, then it is a failure
                    If .Range(colLetter & "8").Value = "Attribute" Then
                        If featureMeasurements(i, j) = 0 Then
                            .Range(colLetter & (j + 22)).Value = "Pass"
                        Else
                            .Range(colLetter & (j + 22)).Value = "Fail"
                        End If
                    Else
                        'Otherwise its variable
                        If featureMeasurements(i, j) = DataSources.VARIABLE_FAILED_VALUE Then
                            'ShowALLObs needs to differentiate Failed measurements from missing ones and does this through a special value
                            .Range(colLetter & (j + 22)).Value = "Fail"
                        Else
                            'Set the good value
                            .Range(colLetter & (j + 22)).Value = featureMeasurements(i, j)
                        End If
                        
                    End If
NextMeasurement:
                Next j

            End With

NextFeature:
    Next i
    
    Exit Sub
    
FeatureValuesErr:
    Err.Raise Number:=Err.Number, description:="sub: populateFeatureMeasuredValues" & vbCrLf & Err.description

End Sub

Private Sub populateTraceabilityInfo(featureTraceabilityInfo() As Variant, pages As Integer)

    'featureTraceabilityInfo(0,j) -> Date
    'featureTraceabilityInfo(1,j) -> EmployeeID
    'featureTraceabilityInfo(2,j) -> Observation Number
    'featureTraceabilityInfo(3,j) -> "Pass" / "Fail"
    
    On Error GoTo FeatureTraceErr

    For i = 1 To pages
        With ThisWorkbook.Worksheets("PAGE " & i)
            For j = 0 To UBound(featureTraceabilityInfo, 2)
                .Range("A" & j + 22).Value = featureTraceabilityInfo(0, j)
                .Range("C" & j + 22).Value = featureTraceabilityInfo(1, j)
                
                'We don't always get a value for the employeeID. So if the value we found is Null, then
                'set it to the value of the cell that we found above.
                'This works because we always have an employeeID for at least the first observation.
                If IsNull(featureTraceabilityInfo(1, j)) Then
                    .Range("C" & j + 22).Value = .Range("C" & j + 21).Value
                Else
                    .Range("C" & j + 22).Value = featureTraceabilityInfo(1, j)
                End If
                
                'If we detected a failure, set the background as red to indicate that
                'we'll use this later to conditionally remove inspections if we don't have ShowAllObservations Toggled
                If featureTraceabilityInfo(3, j) = "Fail" Then
                    .Range("A" & j + 22 & ":" & "C" & j + 22).Interior.Color = RGB(255, 102, 102)
                    .Range("E" & j + 22 & ":" & "L" & j + 22).Interior.Color = RGB(255, 102, 102)
                
                End If
                
            Next j
        End With
    
    
    Next i
    
    Exit Sub

FeatureTraceErr:
    Err.Raise Number:=Err.Number, description:="sub: populateTraceabilityInfo" & vbCrLf & Err.description


End Sub


Private Sub Cleanup()

    Application.ScreenUpdating = False
    
    'Reset the Header information on Page 1
    With Worksheets("PAGE 1")
        .Unprotect Password:="3063bqa"

        .Range("C1").Value = ""
        .Range("C2").Value = ""
        .Range("C3").Value = ""
        .Range("C4").Value = ""
        .Range("G3").Value = ""
        .Range("I3").Value = ""
        .Range("G4").Value = ""


        .protect Password:="3063bqa", AllowFormattingCells:=True


    End With

    'Reset everything else on all sheets
    For i = 1 To 20
        With ThisWorkbook.Worksheets("PAGE " & i)
            If .Visible = True Then
                .Activate
                .Unprotect Password:="3063bqa"
            
                'Clean Data/Employee Information
                With Range("A22:C121")
                    .Value = ""
                    .Interior.Color = RGB(255, 255, 255)
                    .Font.Color = RGB(0, 0, 0)
                End With
                
                'Clean measured values
                With Range("E22:L121")
                    .Value = ""
                    .Interior.Color = RGB(255, 255, 255)
                    .Font.Color = RGB(0, 0, 0)
                End With
                
                'Clean header information
                With Range("E8:L19")
                    .Value = ""
                    .Interior.Color = RGB(255, 255, 255)
                    .Font.Color = RGB(0, 0, 0)
                End With
                
                .protect Password:="3063bqa"
                
                'Leave only the first page visible
                If .Name <> "PAGE 1" Then
                    .Visible = False
                End If
            End If
            
        End With
    Next i
    
    ThisWorkbook.Worksheets("PAGE 1").Activate
    
    Application.ScreenUpdating = True
    
    

End Sub



'****************************************************************************************
'               Extra Functions
'****************************************************************************************

Public Sub PrintResults()

    Dim endPage As Integer
    'we set a hidden value at this cell to tell us how many pages needed to print
    endPage = CInt(Worksheets("PAGE 1").Range("L4").Value)
    
    For Each Sheet In Worksheets
        'Defaults to printing to the ActivePrinter which the user can choose to set in the Settings tab
        If Sheet.Visible = True Then
            Sheet.Printout From:=1, To:=endPage, Collate:=True
        End If
    Next Sheet


End Sub



Private Sub Workbook_BeforeClose(Cancel As Boolean)
        On Error GoTo CloseWB
        Call DatabaseModule.Close_Connections
CloseWB:

End Sub

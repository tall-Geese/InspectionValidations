VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ThisWorkbook"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
'*************************************************************************************************
'
'   ThisWorkbook
'       1. RibbonCommands calls the public subs
'                populateJobHeaders() and populateReport()
'       2. From there this call the private subs
'               populateHeaderFeatureInfo(), populateFeatureMeasuredValues(), populateTraceabilityInfo()
'*************************************************************************************************



Sub populateJobHeaders(jobNum As String, routine As Variant, customer As String, machine As Variant, partNum As String, rev As String, partDesc As String)
    On Error GoTo PopHeadersErr:
    Call Cleanup
    
    'If somebody entered nonsense into the Routine ComboBox, then we clear our variables and call this sub
    'That way the cleanup subroutine happens but then we skip setting empty values
    If IsEmpty(routine) Then Exit Sub
        
        
    With Worksheets("PAGE 1")
        .Unprotect Password:="3063bqa"
        
        .Range("C1").Value = jobNum
        .Range("C2").Value = routine
        .Range("C3").Value = customer
        .Range("C4").Value = machine
        .Range("G3").Value = partNum
        .Range("I3").Value = rev
        .Range("G4").Value = partDesc
        
        
        .Protect Password:="3063bqa", AllowFormattingCells:=True
    End With
    Exit Sub

PopHeadersErr:
    Err.Raise Number:=Err.Number, Description:="Sub: ThisWorkbook.populateJobHeaders" & vbCrLf & Err.Description

End Sub

Public Sub populateReport(featureInfo() As Variant, featureMeasurements() As Variant, featureTraceability() As Variant)

    'If user entered nonsense into the Routine ComboBox, we end up calling this sub but skip setting anything
    If (Not featureInfo) = -1 Or (Not featureMeasurements) = -1 Then Exit Sub
    
    Application.ScreenUpdating = False
    
    'TODO: test that this is infact 0-indexed in the normal situation
    Dim applicablePages As Integer
    applicablePages = Application.WorksheetFunction.Floor((UBound(featureInfo, 2) - LBound(featureInfo, 2)) / 8, 1) + 1
    
    If applicablePages > DataSources.AVAILABLE_PAGES Then
        Err.Raise Number:=vbObjectError + 9999, Description:="Not enough room to fit all the dimensions"
    End If
    
    For i = 1 To applicablePages
        ThisWorkbook.Worksheets("PAGE " & i).Unprotect Password:="3063bqa"
        ThisWorkbook.Worksheets("PAGE " & i).Visible = True
    Next i
    
    Call populateHeaderFeatureInfo(featureInfo:=featureInfo)
    Call populateFeatureMeasuredValues(featureMeasurements:=featureMeasurements)
    Call populateTraceabilityInfo(featureTraceabilityInfo:=featureTraceability, pages:=applicablePages)
    
    For i = 1 To applicablePages
        ThisWorkbook.Worksheets("PAGE " & i).Protect Password:="3063bqa"
    Next i

    Application.ScreenUpdating = True
    
End Sub


Public Sub populateAttrSheet(attFeatHeaders() As Variant, attFeatResults() As Variant, attFeatTraceability() As Variant, _
                                noResults As Boolean, noTraceability As Boolean, noVariables As Boolean)
    'attFeatHeaders(0,i) -> Balloon Num
    'attFeatHeaders(1,i) -> Description
    'attFeatHeaders(2,i) -> Attr Tolerance
    'attFeatHeaders(3,i) -> Frequency
    'attFeatHeaders(4,i) -> Inspection Method
    'attFeatHeaders(5,i) -> Feature Name
    
    'attFeatResults(0,0) -> 0 [Pass] / 1 [Fail]
    'attFeatResults(1,0) -> Feature Count
    
    'attFeatTraceability(0,i) -> Feature Name
    'attFeatTraceability(1,i) -> Employee Num
    'attFeatTraceability(2,i) -> DateTime
    
    
    
    On Error GoTo attSheetErr:
    If (Not attFeatHeaders) = -1 Or (Not attFeatTraceability) = -1 Then Exit Sub
    If RibbonCommands.samplingSize = vbNullString Then
        Call SetAQL(customer:=RibbonCommands.customer, drawNum:=RibbonCommands.drawNum, _
                ProdQty:=RibbonCommands.ProdQty, IsChildOrParent:=(RibbonCommands.IsParentJob Or RibbonCommands.IsChildJob))
    End If
   
    With Sheets("PAGE_Attr")
        .Visible = True
        .Unprotect Password:="3063bqa"
        
        Dim i As Integer
        For i = 0 To UBound(attFeatHeaders, 2)
            .Range("A" & 11 + i).Value = attFeatHeaders(0, i) 'Balloon
            .Range("B" & 11 + i).Value = attFeatHeaders(1, i) 'Char. Description
            .Range("E" & 11 + i).Value = attFeatHeaders(2, i) 'Tolerance
            
            If RibbonCommands.samplingSize >= RibbonCommands.ProdQty Then
                .Range("H" & 11 + i).Value = format(RibbonCommands.custAQL, "0.00") ''AQL
                .Range("I" & 11 + i).Value = "100%" 'SamplingSize
            Else
                .Range("H" & 11 + i).Value = format(RibbonCommands.custAQL, "0.00") 'AQL
                .Range("I" & 11 + i).Value = RibbonCommands.samplingSize 'SamplingSize
            End If
            
            .Range("G" & 11 + i).Value = ExcelHelpers.GetShortHandMethod(attFeatHeaders(4, i)) 'Inspection Method
        
            If noResults Then
                .Range("J" & 11 + i).Value = "Fail" 'Result
                .Range("J" & 11 + i).Interior.Color = RGB(255, 102, 102)
            Else
                .Range("J" & 11 + i).Value = "Pass" 'Result
            End If
            
            If noTraceability Then
                .Range("K" & 11 + i).Interior.Color = RGB(255, 102, 102) 'EmployeeID
                .Range("L" & 11 + i).Interior.Color = RGB(255, 102, 102) 'Date
            Else
                .Range("K" & 11 + i).Value = attFeatTraceability(1, i) 'EmployeeID
                .Range("L" & 11 + i).Value = attFeatTraceability(2, i) 'Date
            End If
        Next i
        
        .Protect Password:="3063bqa"
    End With
    
    If noVariables Then Worksheets("PAGE 1").Visible = False
    Exit Sub
    
attSheetErr:
    With Sheets("PAGE_Attr")
        .Visible = False
        .Protect Password:="3063bqa"
    
    End With
    
    Err.Raise Number:=Err.Number, Description:="Sub: ThisWorkbook.populateAttrSheet" & vbCrLf & Err.Description

End Sub


Private Sub populateHeaderFeatureInfo(featureInfo() As Variant)
        'Maybe, it could be 1-indexed
    'featureInfo(0,i) -> Balloon Number
    'featureInfo(1,i) -> Feature Description
    'featureInfo(2,i) -> Lower Tolerance
    'featureInfo(3,i) -> Target
    'featureInfo(4,i) -> Upper Tolerance
    'featureInfo(5,i) -> Gauge ID
    'featureInfo(6,i) -> Variable / Attribute
    'featureInfo(7,i) -> Attribute Tolerance
    
    On Error GoTo FeatureHeadersErr
    
    
    For i = LBound(featureInfo, 2) To UBound(featureInfo, 2)
            Dim activePageNum As Integer
            'Each worksheet can only hold 8 features at a time, beyond that we need to switch the active page we're putting info on
            activePageNum = Application.WorksheetFunction.Floor((i - LBound(featureInfo, 2)) / 8, 1) + 1
            
            With ThisWorkbook.Worksheets("PAGE " & activePageNum)
                Dim colLetter As String
                colLetter = ExcelHelpers.GetAddress(((i - LBound(featureInfo, 2)) Mod 8) + 5)
                
'                Dim ballHeader As String
'                ballHeader = featureInfo(0 + LBound(featureInfo, 1), i)
'                'If its a numeric balloon number, we should re-format it to be human-readable
'                If (Mid(ballHeader, 2, 1) = "_") And IsNumeric(Right(ballHeader, 1)) Then
'                    If (CInt(Right(ballHeader, 2))) > 0 Then
'                        Dim featureNum As String
'                        featureNum = Split(ballHeader, "_")(1)
'                        For j = 0 To Len(featureNum)
'                            If Mid(featureNum, j + 1, 1) <> 0 Then Exit For
'                        Next j
'                        featureNum = Right(featureNum, Len(featureNum) - j)
'                        .Range(colLetter & "9").Value = featureNum & "_" & Split(ballHeader, "_")(2)
'                    Else
'                        .Range(colLetter & "9").Value = Split(ballHeader, "_")(1)
'                    End If
'                Else
'                    .Range(colLetter & "9").Value = ballHeader 'Balloon
'                End If

                .Range(colLetter & "9").Value = featureInfo(8 + LBound(featureInfo, 1), i) 'Balloon
                .Range(colLetter & "10").Value = featureInfo(1 + LBound(featureInfo, 1), i) 'Description
                Debug.Print (featureInfo(1 + LBound(featureInfo, 1), i))
                
                If featureInfo(6 + LBound(featureInfo, 1), i) = "Variable" Then
                    .Range(colLetter & "16").Value = featureInfo(2 + LBound(featureInfo, 1), i) 'LTol
                    .Range(colLetter & "17").Value = featureInfo(3 + LBound(featureInfo, 1), i) 'Target
                    .Range(colLetter & "18").Value = featureInfo(4 + LBound(featureInfo, 1), i) 'UTol
                Else
                    'TODO, if the featureInfo(7,i) <> "NA" then  we should attempt to evaluate it and split it
                        ' as well as find the target value. will need to find the sig digs
                        'and the boolean of a leading digit for this.
                    If featureInfo(7, i) = "NA" Then
                        .Range(colLetter & "16").Value = "N/A" 'LTol
                        .Range(colLetter & "17").Value = "N/A" 'Target
                        .Range(colLetter & "18").Value = "N/A" 'UTol
                    Else
                        Dim attTol() As Variant
                        attTol = SplitAttrTol(featureInfo(7, i))
                        .Range(colLetter & "16").Value = attTol(0) 'LTol
                        .Range(colLetter & "17").Value = attTol(1) 'Target
                        .Range(colLetter & "18").Value = attTol(2) 'UTol
                        'Also, log what we put in and what we put out
'                        Debug.Print ("input -> " & vbTab & featureInfo(7, i))
'                        Debug.Print ("output -> " & vbTab & attTol(0) & vbTab & attTol(1) & vbTab & attTol(2))
                    End If
                End If
                
                .Range(colLetter & "19").Value = ExcelHelpers.GetShortHandMethod(featureInfo(5 + LBound(featureInfo, 1), i)) 'Inpsection Method
                .Range(colLetter & "8").Value = featureInfo(6 + LBound(featureInfo, 1), i) 'Variable / Attribute  (hidden cell for later reference)
            End With
    Next i
    
    Exit Sub
    
FeatureHeadersErr:
    ExcelHelpers.CloseDataValWB
    Err.Raise Number:=Err.Number, Description:="Sub: ThisWorkbook.populateHeaderFeatureInfo" & vbCrLf & Err.Description
End Sub


Private Sub populateFeatureMeasuredValues(featureMeasurements() As Variant)
    'featureMeasurements has n x m dimensions where
        'n is the number of features
        'm is the number of observations
    
    'featureMeasurements(n,m) -> [Value]
    On Error GoTo FeatureValuesErr
    
    If ((Not featureMeasurements) = -1) Then Exit Sub

    For i = LBound(featureMeasurements, 1) To UBound(featureMeasurements, 1) 'For each balloon#
            If i = LBound(featureMeasurements, 1) Then GoTo NextFeature
            Dim activePageNum As Integer
            activePageNum = Application.WorksheetFunction.Floor((i - (1 + LBound(featureMeasurements, 1))) / 8, 1) + 1

            With ThisWorkbook.Worksheets("PAGE " & activePageNum)
                Dim colLetter As String
                colLetter = ExcelHelpers.GetAddress(((i - (1 + LBound(featureMeasurements, 1))) Mod 8) + 5)
                
                For j = LBound(featureMeasurements, 2) To UBound(featureMeasurements, 2) 'For each observation

                    'if the operator forgot to take a measurement, then it comes up as a NULL value
                    If VarType(featureMeasurements(i, j)) = vbNull Then
                        .Range(colLetter & (j - LBound(featureMeasurements, 1) + 22)).Value = "N/A"
                        GoTo NextMeasurement
                    End If
                    'We store a hidden value for Attribute/Variable in the 8th row
                    'If the returned value on an attribute dimension is 1, then it is a failure
                    If .Range(colLetter & "8").Value = "Attribute" Then
                        If featureMeasurements(i, j) = 0 Then
                            .Range(colLetter & (j - LBound(featureMeasurements, 1) + 22)).Value = "Pass"
                        Else
                            .Range(colLetter & (j - LBound(featureMeasurements, 1) + 22)).Value = "Fail"
                        End If
                    Else
                        'Otherwise its variable
                        If featureMeasurements(i, j) = DataSources.VARIABLE_FAILED_VALUE Then
                            'ShowALLObs needs to differentiate Failed measurements from missing ones and does this through a special value
                            .Range(colLetter & (j - LBound(featureMeasurements, 1) + 22)).Value = "Fail"
                        Else
                            'Set the good value
                            .Range(colLetter & (j - LBound(featureMeasurements, 1) + 22)).Value = featureMeasurements(i, j)
                        End If
                        
                    End If
NextMeasurement:
                Next j

            End With

NextFeature:
    Next i
    
    Exit Sub
    
FeatureValuesErr:
    Err.Raise Number:=Err.Number, Description:="Sub: ThisWorkbook.populateFeatureMeasuredValues" & vbCrLf & Err.Description

End Sub

Private Sub populateTraceabilityInfo(featureTraceabilityInfo() As Variant, pages As Integer)

    'featureTraceabilityInfo(0,j) -> Date
    'featureTraceabilityInfo(1,j) -> EmployeeID
    'featureTraceabilityInfo(2,j) -> Observation Number
    'featureTraceabilityInfo(3,j) -> "Pass" / "Fail"
    
    On Error GoTo FeatureTraceErr
    
    If ((Not featureTraceabilityInfo) = -1) Then Exit Sub

    For i = 1 To pages
        With ThisWorkbook.Worksheets("PAGE " & i)
            For j = 0 To UBound(featureTraceabilityInfo, 2)
                .Range("A" & j + 22).Value = featureTraceabilityInfo(0, j) '-> Date
                .Range("C" & j + 22).Value = featureTraceabilityInfo(1, j) '-> EmployeeID
                
                'We don't always get a value for the employeeID. So if the value we found is Null, then
                'set it to the value of the cell that we found above.
                'This works because we always have an employeeID for at least the first observation.
                If IsNull(featureTraceabilityInfo(1, j)) Then
                    .Range("C" & j + 22).Value = .Range("C" & j + 21).Value
                Else
                    .Range("C" & j + 22).Value = featureTraceabilityInfo(1, j)
                End If
                
                'If we detected a failure, set the background as red to indicate that
                If featureTraceabilityInfo(3, j) = "Fail" Then
                    .Range("A" & j + 22 & ":" & "C" & j + 22).Interior.Color = RGB(255, 102, 102)
                    .Range("E" & j + 22 & ":" & "L" & j + 22).Interior.Color = RGB(255, 102, 102)
                End If
            Next j
        End With
    Next i
    
    Exit Sub

FeatureTraceErr:
    Err.Raise Number:=Err.Number, Description:="Sub: ThisWorkbook.populateTraceabilityInfo" & vbCrLf & Err.Description

End Sub


Private Sub Cleanup()

    Application.ScreenUpdating = False
    
    'Reset the Header information on Page 1
    With Worksheets("PAGE 1")
        .Unprotect Password:="3063bqa"
        
        .PageSetup.RightHeader = vbNullString

        .Range("C1").Value = ""
        .Range("C2").Value = ""
        .Range("C3").Value = ""
        .Range("C4").Value = ""
        .Range("G3").Value = ""
        .Range("I3").Value = ""
        .Range("G4").Value = ""


        .Protect Password:="3063bqa", AllowFormattingCells:=True
        .Visible = True

    End With

    'Reset everything else on all sheets
    For i = 1 To 30
        With ThisWorkbook.Worksheets("PAGE " & i)
            If .Visible = True Then
                .Activate
                .Unprotect Password:="3063bqa"
                
                .PageSetup.RightHeader = vbNullString
            
                'Clean Data/Employee Information
                With Range("A22:C121")
                    .Value = ""
                    .Interior.Color = RGB(255, 255, 255)
                    .Font.Color = RGB(0, 0, 0)
                End With
                
                'Clean measured values
                With Range("E22:L121")
                    .Value = ""
                    .Interior.Color = RGB(255, 255, 255)
                    .Font.Color = RGB(0, 0, 0)
                End With
                
                'Clean header information
                With Range("E8:L19")
                    .Value = ""
                    .Interior.Color = RGB(255, 255, 255)
                    .Font.Color = RGB(0, 0, 0)
                End With
                
                .Protect Password:="3063bqa"
                
                'Leave only the first page visible
                If .Name <> "PAGE 1" Then
                    .Visible = False
                End If
            End If
            
        End With
    Next i
    
    'Reset the PAGE_Attr sheet
    With Worksheets("PAGE_Attr")
        .Unprotect Password:="3063bqa"
        
        .PageSetup.RightHeader = vbNullString
    
        With .Range("A11:L117")
            .Value = ""
            .Interior.Color = RGB(255, 255, 255)
        End With
    
        .Visible = False
        .Protect Password:="3063bqa"
    End With
    
    ThisWorkbook.Worksheets("PAGE 1").Activate
    
    Application.ScreenUpdating = True
    
    

End Sub



'****************************************************************************************
'               Extra Functions
'****************************************************************************************


Private Function SplitAttrTol(inpAttrTol As Variant, Optional featureName As String) As Variant()
    Dim attrTol As String
    Dim tolRange() As String
    Dim numDec As Integer
    Dim hasLeadingChar As Boolean
    Dim outFormat As String
    
    On Error GoTo SplitAttrErr
    
    attrTol = Replace(inpAttrTol, " ", "") 'Repalce whitespace
    
    If UCase(inpAttrTol) Like "*MAX*" Then
        inpAttrTol = Replace(inpAttrTol, "MAX", "")
        SplitAttrTol = Array("N/A", "N/A", inpAttrTol)
        Exit Function
    ElseIf UCase(inpAttrTol) Like "*MIN*" Then
        inpAttrTol = Replace(inpAttrTol, "MIN", "")
        SplitAttrTol = Array(inpAttrTol, "N/A", "N/A")
        Exit Function
    End If
    
    
    Dim i As Integer
        'Walk through and detect
    For i = 1 To Len(attrTol)
        Dim char As String
        char = Mid(attrTol, i, 1)
        If Not (IsNumeric(char) Or char = "." Or char = "/") Then
            'Its something that we cant process, so lets just return "NA"s
            SplitAttrTol = Array("N/A", "N/A", "N/A")
            Exit Function
        End If
    Next i
    
    tolRange = Split(attrTol, "/")
    
    numDec = Application.WorksheetFunction.Max(GetDecimalPlaces(tolRange(0), hasLeadingChar), GetDecimalPlaces(tolRange(1), hasLeadingChar))
    outFormat = GenFormat(numDec, hasLeadingChar)
    
    'Maybe another error handling here
    Dim calcTarget As Double
    Dim outStr As String
    calcTarget = Application.WorksheetFunction.Round((CDbl(tolRange(0)) + CDbl(tolRange(1))) / 2, numDec)
    
        'If the avg is the same as either Tolerance bound because both are only a single unit apart of the lowest significant digit
            'Then extend the format out another sigDig to show the difference
    If (CStr(calcTarget) = tolRange(0) Or CStr(calcTarget) = tolRange(1)) And InStr(outFormat, ".") > 0 Then
        calcTarget = Application.WorksheetFunction.Round((CDbl(tolRange(0)) + CDbl(tolRange(1))) / 2, numDec + 1)
        outFormat = outFormat & "0"
    End If
    outStr = format(CStr(calcTarget), outFormat)
    
    SplitAttrTol = Array(tolRange(0), outStr, tolRange(1))

    Exit Function
    
SplitAttrErr:
    'Just return the default values, we couldn't parse here
    SplitAttrTol = Array("N/A", "N/A", "N/A")
    
    'TODO: Dont want to interrupt the current user with a msg, especially since this would happen during printing.
    'We should setup some kind of logging service that will keep track, passing in the inpAttrTol, the featureName and
        'Getting the RibbonCommands.jobNumUCase , customer and partNum as well. From there it can be narrowed down
End Function


Private Function GetDecimalPlaces(val As String, ByRef leadingChar As Boolean) As Integer
    Dim location As Integer
    location = InStr(val, ".")
    If location = 0 Then
        GetDecimalPlaces = 0
        Exit Function
    End If
        'If the "." is not the first character then we have leading characters in this value
    If location > 1 Then leadingChar = True

    GetDecimalPlaces = Len(val) - location
End Function


Private Function GenFormat(sigDig As Integer, hasLeadingChar As Boolean) As String
    Dim format As String
    If hasLeadingChar Then
        format = "0"
    Else
        format = "#"
    End If
    
    If sigDig = 0 Then
        GenFormat = format
        Exit Function
    End If
    
    format = format & "."
    
    Dim i As Integer
    For i = 1 To sigDig
        format = format & "0"
    Next i
    
    GenFormat = format
End Function

Sub test_Header()
    Worksheets("PAGE 1").PageSetup.RightHeader = vbCrLf & "Page &P of " & Worksheets("PAGE 1").Range("K4").Value



End Sub

Public Sub PrintResults()

    Dim endPage As Integer
    'we set a hidden value at this cell to tell us how many pages needed to print
    endPage = CInt(Worksheets("PAGE 1").Range("L4").Value)
    
    
    For Each Sheet In Worksheets
        'Defaults to printing to the ActivePrinter which the user can choose to set in the Settings tab
        If Sheet.Visible = True Then
            If Sheet.Name = "PAGE_Attr" Then
                'The attr sheet increments pages by featureCount, not observation count
                Dim attEnd As Integer
                attEnd = CInt(Sheet.Range("L4").Value)
                Sheet.PageSetup.RightHeader = vbCrLf & "Page &P of " & attEnd
                Sheet.Printout From:=1, To:=attEnd, Collate:=True
            Else
                Sheet.PageSetup.RightHeader = vbCrLf & "Page &P of " & endPage
                Sheet.Printout From:=1, To:=endPage, Collate:=True
            End If
        End If
    Next Sheet


End Sub



Private Sub Workbook_BeforeClose(Cancel As Boolean)
        On Error GoTo CloseWB
        Call DatabaseModule.Close_Connections
CloseWB:

End Sub

    'Wrapper for ExcelHelpers.GetAQL()
    'Likely only called in the event the user does not have "Auto Load Checklist" enabled
Private Sub SetAQL(customer As String, drawNum As String, ProdQty As Integer, IsChildOrParent As Boolean)
    Dim aqlValues() As String, childOrParent As Boolean
    childOrParent = (RibbonCommands.IsChildJob Or RibbonCommands.IsParentJob)
    
    aqlValues = ExcelHelpers.GetAQL(customer:=RibbonCommands.customer, drawNum:=RibbonCommands.drawNum, _
                                            ProdQty:=RibbonCommands.ProdQty, isChildOrParentJob:=childOrParent)
    
    RibbonCommands.samplingSize = aqlValues(0)
    RibbonCommands.custAQL = aqlValues(1)
    
    If childOrParent Then
        RibbonCommands.parentChildSamplingSize = aqlValues(2)
        RibbonCommands.parentChildFinalAQL = aqlValues(3)
    End If
        
End Sub


